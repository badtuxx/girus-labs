apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-fundamentos-lab
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: docker-fundamentos
    title: "Introdução ao Docker"
    description: "Aprenda os conceitos fundamentais de containerização com Docker, desde comandos básicos até a execução e gerenciamento de containers. Este laboratório guiado explora a arquitetura do Docker, seus componentes essenciais e fornece uma base sólida para suas jornadas de containerização."
    duration: 25m
    image: "linuxtips/girus-devops:0.1"
    youtubeVideo: "https://www.youtube.com/watch?v=0cDj7citEjE"
    privileged: true
    tasks:
      - name: "Explorando o Ambiente Docker"
        description: "Entenda a arquitetura do Docker e seus componentes fundamentais, aprendendo a verificar o ambiente, identificar versões e componentes básicos da plataforma."
        steps:
          - "O Docker é uma plataforma de containerização que permite empacotar aplicações e suas dependências em unidades padronizadas chamadas containers. Diferente de máquinas virtuais, containers compartilham o kernel do host, tornando-os mais leves e eficientes."
          - "A arquitetura do Docker consiste em um modelo cliente-servidor, onde o Docker CLI (Command Line Interface) se comunica com o Docker daemon (engine), responsável pela construção, execução e gerenciamento dos containers."
          - "Vamos começar verificando a versão do Docker instalada no sistema:"
          - "`docker --version`"
          - "Este comando mostra a versão do Docker Client e Docker Engine. É útil para confirmar que o Docker está instalado corretamente e identificar a versão para fins de compatibilidade e documentação."
          - "Para obter informações mais detalhadas sobre a instalação do Docker, incluindo configurações do sistema, número de containers, imagens e outros dados relevantes, execute:"
          - "`docker info`"
          - "Observe as várias seções da saída, que incluem detalhes sobre:"
          - "• Storage Driver - Responsável por gerenciar as camadas de imagens e containers"
          - "• Logging Driver - Como os logs dos containers são capturados"
          - "• Cgroup Driver - Sistema de gerenciamento de recursos utilizado"
          - "• Número de containers e imagens"
          - "• Configurações de rede"
          - "Imagens e containers são conceitos fundamentais do Docker:"
          - "• Imagens são templates somente leitura que contêm instruções para criar containers"
          - "• Containers são instâncias executáveis de imagens"
          - "Vamos listar as imagens já disponíveis localmente:"
          - "`docker images`"
          - "Se esta é uma instalação nova, talvez não haja muitas imagens. As imagens são identificadas pelo repositório e tag (geralmente indicando a versão). O ID da imagem é um identificador único."
          - "Agora, vamos verificar se existem containers em execução ou parados:"
          - "`docker ps -a`"
          - "O comando `docker ps` por si só mostra apenas containers em execução. A flag `-a` (all) mostra todos, incluindo os parados. A saída inclui:"
          - "• CONTAINER ID - Identificador único do container"
          - "• IMAGE - Imagem usada para criar o container"
          - "• COMMAND - Comando executado dentro do container"
          - "• STATUS - Estado atual (Up, Exited, etc.)"
          - "• PORTS - Mapeamentos de porta entre host e container"
          - "• NAMES - Nome do container (gerado automaticamente se não especificado)"
          - "O Docker utiliza redes virtuais para permitir a comunicação entre containers e com o mundo externo. Vamos verificar as redes disponíveis:"
          - "`docker network ls`"
          - "Por padrão, você verá pelo menos três redes:"
          - "• bridge - Rede padrão para containers"
          - "• host - Remove o isolamento de rede entre container e host"
          - "• none - Desativa a rede para o container"
        tips:
          - type: "info"
            title: "Docker CLI - Sua ferramenta principal"
            content: "O comando docker é a ferramenta de linha de comando para interagir com o Docker. Sempre que tiver dúvidas sobre um comando, use docker --help ou docker [comando] --help."
          - type: "tip"
            title: "Formatos de saída"
            content: "Você pode mudar o formato de saída de qualquer comando docker usando --format. Por exemplo: docker ps --format '{{.Names}} {{.Status}}'"
          - type: "warning"
            title: "Instalações em ambientes de produção"
            content: "Em ambientes de produção, aspectos como segurança, armazenamento e redes requerem configuração adicional. O Docker Desktop (para Windows/Mac) já vem com configurações padrão amigáveis, mas instalações em servidores Linux geralmente precisam de ajustes adicionais."
        validation:
          - command: "docker info &>/dev/null && echo 'success' || echo 'error'"
            expectedOutput: "success"
            errorMessage: "Não foi possível acessar o daemon Docker. Verifique se o serviço está em execução."
      
      - name: "Executando Containers"
        description: "Compreenda como containers são executados, como interagir com eles e os diferentes modos de operação disponíveis no Docker."
        steps:
          - "Executar containers é a funcionalidade central do Docker. Vamos explorar diferentes formas de criar e gerenciar containers."
          - "1. Testando o ambiente com Hello World"
          - "O container 'hello-world' é frequentemente usado para verificar se o Docker está funcionando corretamente. Vamos executá-lo:"
          - "`docker run hello-world`"
          - "Quando executamos este comando, o Docker:"
          - "1. Procura a imagem 'hello-world' localmente"
          - "2. Se não encontrar, baixa automaticamente do Docker Hub (registry padrão)"
          - "3. Cria um container a partir dessa imagem"
          - "4. Executa o comando padrão definido na imagem"
          - "5. Exibe a saída e encerra o container"
          - "A saída do hello-world explica exatamente o que aconteceu nos bastidores, ajudando a entender o fluxo básico do Docker."
          - "2. Executando um servidor web (Nginx)"
          - "Agora, vamos executar algo mais prático: um servidor web Nginx. Diferente do hello-world, queremos que este container continue rodando em segundo plano:"
          - "`docker run -d --name meu-nginx -p 8080:80 nginx`"
          - "Vamos entender cada parte deste comando:"
          - "• `docker run` - Comando para criar e iniciar um container"
          - "• `-d` (detached) - Executa o container em segundo plano"
          - "• `--name meu-nginx` - Atribui um nome ao container (em vez de um nome aleatório)"
          - "• `-p 8080:80` - Mapeia a porta 80 do container para a porta 8080 do host"
          - "• `nginx` - Nome da imagem a ser usada"
          - "Para verificar se o container está em execução:"
          - "`docker ps`"
          - "Você deve ver 'meu-nginx' na lista, com status 'Up'."
          - "3. Acessando o servidor web"
          - "Como mapeamos a porta 8080 do host para a porta 80 do container, podemos acessar o Nginx:"
          - "`curl localhost:8080`"
          - "Você deve ver o HTML da página padrão do Nginx. Em um ambiente de desktop, você também poderia abrir um navegador e acessar http://localhost:8080."
          - "4. Visualizando logs do container"
          - "É importante saber como verificar os logs de um container para diagnóstico:"
          - "`docker logs meu-nginx`"
          - "Se você acessou o Nginx, deverá ver logs de requisição HTTP nas linhas mais recentes."
          - "Para acompanhar os logs em tempo real (similar ao 'tail -f'):"
          - "`docker logs -f meu-nginx`"
          - "Pressione Ctrl+C para parar de acompanhar os logs."
          - "5. Gerenciando o ciclo de vida do container"
          - "Os containers podem ser parados, iniciados e reiniciados sem perder seu estado:"
          - "`docker stop meu-nginx`"
          - "Isto envia um sinal SIGTERM seguido por SIGKILL (após um tempo de espera) para o processo principal do container."
          - "Para iniciar um container parado:"
          - "`docker start meu-nginx`"
          - "E para reiniciar (equivalente a stop seguido de start):"
          - "`docker restart meu-nginx`"
          - "**6. Modo interativo e containers efêmeros**"
          - "Para tarefas de diagnóstico ou testes, frequentemente queremos iniciar um container temporário com acesso ao shell:"
          - "`docker run -it --rm ubuntu bash`"
          - "**Explicando as flags:**"
          - "**-it** - Combina **-i** (interativo) e **-t** (aloca um pseudo-TTY), permitindo interação com o terminal"
          - "**--rm** - Remove automaticamente o container quando ele for finalizado"
          - "**ubuntu** - Imagem a ser usada (Ubuntu Linux neste caso)"
          - "**bash** - Comando a ser executado no container (sobrescreve o CMD definido na imagem)"
          - "Dentro do container Ubuntu, você agora está em um ambiente Linux isolado. Vamos executar alguns comandos para explorar:"
          - "`ls -la`"
          - "Esta é a estrutura de diretórios do container, não do seu host."
          - "`cat /etc/os-release`"
          - "Mostra detalhes da distribuição Linux dentro do container."
          - "Para sair do container, digite:"
          - "`exit`"
          - "Como usamos `--rm`, o container será automaticamente removido após sair."
          - "7. Inspecionando um container"
          - "Para ver informações detalhadas sobre um container específico:"
          - "`docker inspect meu-nginx`"
          - "Este comando retorna um JSON detalhado com todas as configurações e estado do container, incluindo rede, volumes, environment, etc."
          - "Por fim, se quisermos remover um container:"
          - "`docker rm -f meu-nginx`"
          - "A flag `-f` força a remoção mesmo se o container estiver em execução."
        tips:
          - type: "warning"
            title: "Portas expostas"
            content: "Lembre-se que para acessar serviços dentro de um container a partir do host, você precisa mapear as portas com a flag -p. Exemplo: -p [porta-host]:[porta-container]"
          - type: "info"
            title: "Modos de execução"
            content: "O Docker permite executar containers em modo detached (-d), interativo (-it) ou com uma combinação de flags. Use --rm para remover automaticamente o container quando ele for finalizado."
          - type: "tip"
            title: "Gerenciamento de recursos"
            content: "Em ambientes de produção, é recomendável limitar os recursos que cada container pode usar com flags como --memory=512m e --cpus=0.5. Isso evita que um único container comprometa a estabilidade do host."
          - type: "info"
            title: "Persistência de dados"
            content: "Containers são efêmeros por natureza. Dados criados dentro de um container serão perdidos quando ele for removido, a menos que você use volumes ou bind mounts para persistência."
        validation:
          - command: "docker ps -a --format '{{.Names}}' | grep -w meu-nginx || echo ''"
            expectedOutput: "meu-nginx"
            errorMessage: "O container meu-nginx não foi criado. Verifique se você executou o comando docker run corretamente."
          - command: "curl -s localhost:8080 | grep -q -i nginx && echo 'Nginx acessível' || echo 'Erro no acesso'"
            expectedOutput: "Nginx acessível"
            errorMessage: "Não foi possível acessar o Nginx na porta 8080. Verifique se o container está rodando e se a porta está mapeada corretamente."

      - name: "Trabalhando com Imagens Docker"
        description: "Aprenda a pesquisar, baixar e gerenciar imagens Docker, entendendo conceitos como tags, versões e registries."
        steps:
          - "**Imagens Docker** são os blocos de construção dos containers. Elas consistem em camadas somente leitura que, quando combinadas, formam o sistema de arquivos do container."
          - "**1. Buscando imagens no Docker Hub**"
          - "O Docker Hub é o registry público padrão onde podemos encontrar milhares de imagens oficiais e da comunidade:"
          - "`docker search ubuntu`"
          - "Este comando busca imagens relacionadas a 'ubuntu' no Docker Hub. A saída mostra o nome, descrição, número de estrelas (popularidade), status oficial e se é automatizada."
          - "Para uma busca mais específica:"
          - "`docker search --filter=stars=1000 nginx`"
          - "Isso mostra apenas imagens do Nginx com pelo menos 1000 estrelas."
          - "**2. Baixando imagens (pull)**"
          - "Podemos baixar uma imagem sem criar um container imediatamente:"
          - "`docker pull alpine`"
          - "Por padrão, isso baixa a tag 'latest'. Tags são usadas para versionar imagens. Para baixar uma versão específica:"
          - "`docker pull ubuntu:20.04`"
          - "Aqui, '20.04' é a tag que especifica a versão do Ubuntu que queremos."
          - "O Docker usa um sistema de camadas para otimizar o armazenamento e a transferência de imagens. Se você já tem partes de uma imagem localmente, apenas as camadas novas serão baixadas."
          - "**3. Listando e gerenciando imagens locais**"
          - "Para ver todas as imagens baixadas:"
          - "`docker images`"
          - "Ou com mais detalhes:"
          - "`docker images --digests`"
          - "O digest é um hash SHA256 que identifica unicamente o conteúdo da imagem, independente da tag."
          - "Para remover uma imagem que não está sendo usada:"
          - "`docker rmi alpine`"
          - "Se a imagem estiver sendo usada por um container (mesmo parado), você precisará remover o container primeiro ou forçar a remoção:"
          - "`docker rmi -f alpine`"
          - "**4. Entendendo o sistema de tags**"
          - "Tags são fundamentais para gerenciar versões de imagens. Algumas convenções comuns:"
          - "- `latest` - Geralmente aponta para a versão mais recente, mas isso não é garantido"
          - "- Versões semânticas - `3.9.6`, `2.0`, etc."
          - "- Distribuições base - `alpine`, `slim`, `stretch`"
          - "- Combinações - `3.9.6-alpine`, `latest-slim`"
          - "Por exemplo, vamos ver as tags disponíveis para o Node.js:"
          - "`docker pull node:lts-alpine`"
          - "Este comando baixa a versão LTS (Long Term Support) do Node.js em uma imagem Alpine Linux, que é muito menor que a imagem padrão."
          - "**5. Inspecionando imagens**"
          - "Para ver detalhes de uma imagem, incluindo camadas, volumes, portas e outros metadados:"
          - "`docker inspect node:lts-alpine`"
          - "Para ver o histórico de camadas e entender como a imagem foi construída:"
          - "`docker history node:lts-alpine`"
          - "Este comando mostra cada instrução que foi usada para criar a imagem, ajudando a entender sua estrutura interna."
        tips:
          - type: "info"
            title: "Imagens Oficiais vs Comunidade"
            content: "Imagens oficiais no Docker Hub (marcadas como [OK]) são mantidas pela Docker Inc. ou por parceiros e geralmente seguem boas práticas de segurança. Em ambientes de produção, é recomendável usar imagens oficiais ou construir suas próprias."
          - type: "warning"
            title: "A Armadilha da Tag 'latest'"
            content: "Evite usar a tag 'latest' em ambientes de produção, pois ela pode mudar sem aviso. Prefira tags específicas para garantir reprodutibilidade e evitar surpresas durante atualizações."
          - type: "tip"
            title: "Imagens Base Otimizadas"
            content: "Variantes Alpine são muito menores que as imagens base padrão. Por exemplo, 'node:alpine' tem cerca de 50MB, enquanto 'node' (baseada em Debian) tem mais de 300MB. Imagens menores são mais rápidas para baixar e mais seguras por terem menos pacotes instalados."
        validation:
          - command: "docker images alpine --format 'found' 2>/dev/null || echo 'not found'"
            expectedOutput: "found"
            errorMessage: "A imagem Alpine não foi baixada. Execute o comando 'docker pull alpine' para baixá-la."
          - command: "docker images | wc -l"
            expectedExpression: ">= 2"
            errorMessage: "Você deveria ter pelo menos uma imagem além do cabeçalho da tabela. Execute alguns comandos docker pull."
