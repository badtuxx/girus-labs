apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-deployments-lab
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: kubernetes-deployments
    title: "Kubernetes: Gerenciando Aplicações com Deployments"
    description: "Aprenda a gerenciar aplicações em Kubernetes usando Deployments, um recurso essencial para garantir disponibilidade, escalabilidade e atualizações seguras de aplicações. Este laboratório guiado explora o ciclo de vida completo de Deployments, incluindo criação, atualização, rollback e escalonamento horizontal, com explicações detalhadas de conceitos fundamentais."
    duration: 35m
    image: "linuxtips/girus-devops:0.1"
    privileged: true
    tasks:
      - name: "Conceitos Fundamentais de Deployments"
        description: "Compreenda o que são Deployments no Kubernetes, sua finalidade e como eles se relacionam com outros recursos do sistema."
        steps:
          - "**O que são Deployments?**"
          - "Um Deployment é um recurso do Kubernetes que fornece atualizações declarativas para aplicações. Ele permite que você:"
          - "- Descreva o estado desejado da sua aplicação"
          - "- Altere o estado real para o estado desejado de maneira controlada"
          - "- Faça rollback para versões anteriores"
          - "- Pause e retome atualizações"
          - "**Hierarquia de Recursos com Deployments**"
          - "Os Deployments criam e gerenciam outros recursos em uma hierarquia:"
          - "```"
          - "Deployment → ReplicaSet → Pods → Containers"
          - "```"
          - "- O **Deployment** define o estado desejado da aplicação"
          - "- O **ReplicaSet** garante que o número correto de réplicas da aplicação esteja em execução"
          - "- Os **Pods** são as unidades de execução que contêm os containers da aplicação"
          - "**Por que usar Deployments?**"
          - "- **Alta disponibilidade**: Mantém múltiplas réplicas da aplicação disponíveis"
          - "- **Atualizações sem downtime**: Implementa estratégias de atualização gradual (rolling updates)"
          - "- **Versionamento**: Mantém histórico de revisões para facilitar rollbacks"
          - "- **Escalonamento**: Permite aumentar ou diminuir o número de réplicas facilmente"
          - "- **Auto-recuperação**: Substitui automaticamente Pods que falham"
          - "**Estratégias de Atualização**"
          - "O Kubernetes suporta duas estratégias principais de atualização via Deployments:"
          - "1. **RollingUpdate** (padrão): Substitui gradualmente os pods antigos por novos, garantindo disponibilidade contínua"
          - "2. **Recreate**: Termina todos os pods existentes antes de criar novos (causa downtime)"
          - "Vamos examinar um exemplo de manifesto de Deployment:"
          - "```yaml"
          - "apiVersion: apps/v1"
          - "kind: Deployment"
          - "metadata:"
          - "  name: nginx-deployment"
          - "spec:"
          - "  replicas: 3                     # Número desejado de pods"
          - "  selector:                       # Como o Deployment identifica os pods que gerencia"
          - "    matchLabels:"
          - "      app: nginx"
          - "  strategy:                       # Estratégia de atualização"
          - "    type: RollingUpdate"
          - "    rollingUpdate:"
          - "      maxSurge: 1                 # Quantos pods extras podem ser criados durante a atualização"
          - "      maxUnavailable: 1           # Quantos pods podem ficar indisponíveis durante a atualização"
          - "  template:                       # Template do Pod"
          - "    metadata:"
          - "      labels:"
          - "        app: nginx"
          - "    spec:"
          - "      containers:"
          - "      - name: nginx"
          - "        image: nginx:1.20         # Versão específica da imagem"
          - "        ports:"
          - "        - containerPort: 80"
          - "```"
        tips:
          - type: "info"
            title: "Declarativo vs Imperativo"
            content: "O Kubernetes segue um modelo declarativo: você declara o estado desejado (ex: 3 réplicas), e o Kubernetes trabalha para manter esse estado, mesmo após falhas ou reinicializações."
          - type: "warning"
            title: "Labels e Selectors"
            content: "Os labels e selectors são cruciais para o funcionamento dos Deployments. O selector do Deployment deve corresponder aos labels definidos no template do Pod, caso contrário, o Deployment não conseguirá gerenciar os Pods."
          - type: "tip"
            title: "Sempre Especifique a Versão da Imagem"
            content: "Use tags específicas para as imagens (nginx:1.20) em vez de tags genéricas (nginx:latest) para garantir previsibilidade e facilitar rollbacks."
        validation:
          - command: "kubectl api-resources | grep deployment"
            expectedExpression: "~ deployment"
            errorMessage: "Não foi possível encontrar o recurso 'deployment' no cluster. Verifique se o cluster está em execução."

      - name: "Criando seu Primeiro Deployment"
        description: "Crie um Deployment básico para uma aplicação web e explore suas propriedades e comportamentos."
        steps:
          - "**Criando um Deployment via YAML**"
          - "Vamos criar um Deployment para uma aplicação web simples usando o Nginx."
          - "Crie um arquivo chamado `nginx-deployment.yaml` com o seguinte conteúdo:"
          - "```yaml"
          - "apiVersion: apps/v1"
          - "kind: Deployment"
          - "metadata:"
          - "  name: nginx-deployment"
          - "  labels:"
          - "    app: nginx"
          - "spec:"
          - "  replicas: 3"
          - "  selector:"
          - "    matchLabels:"
          - "      app: nginx"
          - "  template:"
          - "    metadata:"
          - "      labels:"
          - "        app: nginx"
          - "    spec:"
          - "      containers:"
          - "      - name: nginx"
          - "        image: nginx:1.20"
          - "        ports:"
          - "        - containerPort: 80"
          - "```"
          - "Aplique o Deployment ao cluster:"
          - "`kubectl apply -f nginx-deployment.yaml`"
          - "**Verificando o Deployment**"
          - "Vamos verificar se o Deployment foi criado e está funcionando corretamente:"
          - "`kubectl get deployments`"
          - "A saída deve mostrar o status do seu Deployment, incluindo o número de réplicas disponíveis:"
          - "```"
          - "NAME               READY   UP-TO-DATE   AVAILABLE   AGE"
          - "nginx-deployment   3/3     3            3           30s"
          - "```"
          - "**Explorando a Hierarquia de Recursos**"
          - "Vamos observar como o Deployment cria e gerencia outros recursos:"
          - "1. Verificando o ReplicaSet criado pelo Deployment:"
          - "`kubectl get replicasets`"
          - "2. Verificando os Pods criados pelo ReplicaSet:"
          - "`kubectl get pods -l app=nginx`"
          - "**Examinando Detalhes do Deployment**"
          - "Para ver informações detalhadas sobre o Deployment:"
          - "`kubectl describe deployment nginx-deployment`"
          - "Observe as seções importantes como Events, que mostram o histórico de ações realizadas pelo controlador do Deployment."
          - "**Acessando a Aplicação**"
          - "Para acessar a aplicação Nginx que acabamos de implantar, vamos criar um serviço temporário usando port-forward:"
          - "`POD_NAME=$(kubectl get pods -l app=nginx -o jsonpath='{.items[0].metadata.name}')`"
          - "`kubectl port-forward $POD_NAME 8080:80 &`"
          - "Agora você pode acessar o Nginx em http://localhost:8080 ou usando curl:"
          - "`curl localhost:8080`"
          - "Você deve ver a página de boas-vindas padrão do Nginx."
          - "Encerre o port-forward quando terminar:"
          - "`pkill -f \"kubectl port-forward\"`"
        tips:
          - type: "tip"
            title: "Visualizando Eventos"
            content: "Use 'kubectl get events --sort-by=.metadata.creationTimestamp' para ver todos os eventos recentes do cluster, o que pode ajudar a diagnosticar problemas com Deployments."
          - type: "info"
            title: "Terminologia do Status"
            content: "Na saída do 'kubectl get deployments': READY mostra pods prontos/desejados, UP-TO-DATE são pods atualizados com a configuração mais recente, e AVAILABLE são pods que estão atendendo requisições."
          - type: "warning"
            title: "Namespace"
            content: "Se você não especificar um namespace, o Kubernetes usará o namespace 'default'. Em ambientes de produção, é recomendado criar e usar namespaces específicos para diferentes aplicações ou equipes."
        validation:
          - command: "kubectl get deployment nginx-deployment -o jsonpath='{.status.readyReplicas}'"
            expectedOutput: "3"
            errorMessage: "O Deployment não tem 3 réplicas prontas como esperado. Verifique os logs e eventos para identificar o problema."
          - command: "kubectl get pods -l app=nginx --no-headers | wc -l"
            expectedOutput: "3"
            errorMessage: "Não foram encontrados 3 pods do Nginx. Verifique se o Deployment foi criado corretamente."

      - name: "Atualizando e Gerenciando Deployments"
        description: "Aprenda a atualizar aplicações, monitorar o progresso e gerenciar o ciclo de vida dos Deployments."
        steps:
          - "**Atualizando a Versão da Aplicação**"
          - "Uma das funcionalidades mais poderosas dos Deployments é a capacidade de atualizar aplicações sem downtime. Vamos atualizar nosso Deployment para usar uma versão mais recente do Nginx:"
          - "`kubectl set image deployment/nginx-deployment nginx=nginx:1.21 --record`"
          - "O parâmetro `--record` registra o comando na história do Deployment, o que é útil para entender o que mudou em cada revisão."
          - "**Observando o Processo de Atualização**"
          - "Podemos observar em tempo real o processo de atualização (o rolling update):"
          - "`kubectl rollout status deployment/nginx-deployment`"
          - "Este comando mostrará o progresso da atualização, indicando quando estiver completa."
          - "**Verificando a Atualização**"
          - "Vamos verificar se a imagem foi atualizada corretamente:"
          - "`kubectl describe deployment nginx-deployment | grep -i image`"
          - "Você deve ver `Image: nginx:1.21` na saída."
          - "Vamos também verificar o ReplicaSet. Note que um novo ReplicaSet foi criado para a nova versão:"
          - "`kubectl get replicasets`"
          - "Você deve ver dois ReplicaSets: um com 3 réplicas (o novo) e outro com 0 réplicas (o antigo)."
          - "**Histórico de Revisões**"
          - "O Kubernetes mantém um histórico de revisões do Deployment, permitindo rollbacks se necessário:"
          - "`kubectl rollout history deployment/nginx-deployment`"
          - "Para ver detalhes de uma revisão específica:"
          - "`kubectl rollout history deployment/nginx-deployment --revision=2`"
          - "**Realizando um Rollback**"
          - "Se houver problemas com a nova versão, você pode reverter facilmente para uma versão anterior:"
          - "`kubectl rollout undo deployment/nginx-deployment`"
          - "Isso reverterá para a revisão anterior (1.20). Você também pode especificar uma revisão específica:"
          - "`kubectl rollout undo deployment/nginx-deployment --to-revision=1`"
          - "**Escalando o Deployment**"
          - "Você pode facilmente escalar seu Deployment para lidar com mais tráfego:"
          - "`kubectl scale deployment nginx-deployment --replicas=5`"
          - "Verifique se o número de réplicas foi atualizado:"
          - "`kubectl get deployment nginx-deployment`"
          - "Agora você deve ver 5 réplicas disponíveis."
          - "**Pausando e Retomando Rollouts**"
          - "Você pode pausar um Deployment para fazer múltiplas atualizações sem acionar várias atualizações consecutivas:"
          - "`kubectl rollout pause deployment/nginx-deployment`"
          - "Faça várias alterações:"
          - "`kubectl set image deployment/nginx-deployment nginx=nginx:1.22`"
          - "`kubectl set resources deployment/nginx-deployment -c=nginx --limits=cpu=200m,memory=512Mi`"
          - "Depois, retome o rollout para aplicar todas as alterações de uma vez:"
          - "`kubectl rollout resume deployment/nginx-deployment`"
          - "Acompanhe o progresso:"
          - "`kubectl rollout status deployment/nginx-deployment`"
        tips:
          - type: "warning"
            title: "Canary Deployments"
            content: "Para lançamentos mais controlados, considere implementar uma estratégia de Canary Deployment, onde você inicialmente direciona apenas uma pequena porcentagem do tráfego para a nova versão."
          - type: "tip"
            title: "Limites de Recursos"
            content: "Sempre defina limites de recursos (CPU/memória) para seus containers em ambientes de produção para evitar que uma aplicação consuma recursos excessivos do cluster."
          - type: "info"
            title: "Estratégias de Implantação Avançadas"
            content: "Para estratégias além do rolling update básico, considere ferramentas como Argo Rollouts, Flagger ou Spinnaker, que oferecem recursos avançados como Blue/Green e Canary Deployments."
        validation:
          - command: "kubectl get deployment nginx-deployment -o jsonpath='{.spec.replicas}'"
            expectedOutput: "5"
            errorMessage: "O Deployment não foi escalonado para 5 réplicas como esperado."
          - command: "kubectl rollout history deployment/nginx-deployment | grep -c 'revision'"
            expectedExpression: ">= 2"
            errorMessage: "Não foram encontradas pelo menos 2 revisões no histórico do Deployment."

      - name: "Implementando Estratégias de Atualização Avançadas"
        description: "Configure e teste estratégias de atualização customizadas para atender a diferentes necessidades de disponibilidade e segurança."
        steps:
          - "**Configurando Estratégias de RollingUpdate**"
          - "O Kubernetes permite configurar como as atualizações são aplicadas. Vamos modificar nossa estratégia de atualização para ser mais cautelosa:"
          - "Edite o arquivo `nginx-deployment.yaml` para incluir configurações específicas de RollingUpdate:"
          - "```yaml"
          - "apiVersion: apps/v1"
          - "kind: Deployment"
          - "metadata:"
          - "  name: nginx-deployment"
          - "  labels:"
          - "    app: nginx"
          - "spec:"
          - "  replicas: 5"
          - "  selector:"
          - "    matchLabels:"
          - "      app: nginx"
          - "  strategy:"
          - "    type: RollingUpdate"
          - "    rollingUpdate:"
          - "      maxSurge: 1        # No máximo 1 pod acima do desejado durante a atualização"
          - "      maxUnavailable: 1  # No máximo 1 pod abaixo do desejado durante a atualização"
          - "  template:"
          - "    metadata:"
          - "      labels:"
          - "        app: nginx"
          - "    spec:"
          - "      containers:"
          - "      - name: nginx"
          - "        image: nginx:1.22"
          - "        ports:"
          - "        - containerPort: 80"
          - "        resources:"
          - "          limits:"
          - "            memory: \"512Mi\""
          - "            cpu: \"200m\""
          - "          requests:"
          - "            memory: \"256Mi\""
          - "            cpu: \"100m\""
          - "        readinessProbe:"
          - "          httpGet:"
          - "            path: /"
          - "            port: 80"
          - "          initialDelaySeconds: 5"
          - "          periodSeconds: 10"
          - "```"
          - "Observe as novas configurações:"
          - "- `strategy.type`: Define a estratégia como RollingUpdate (padrão)"
          - "- `maxSurge`: Limita quantos pods podem ser criados acima do número desejado durante a atualização"
          - "- `maxUnavailable`: Limita quantos pods podem estar indisponíveis durante a atualização"
          - "- `readinessProbe`: Verifica se o pod está pronto para receber tráfego, crucial para atualizações seguras"
          - "- `resources`: Define limites e requisitos de recursos para cada container"
          - "Aplique a configuração atualizada:"
          - "`kubectl apply -f nginx-deployment.yaml`"
          - "**Observando o RollingUpdate Controlado**"
          - "Acompanhe o progresso da atualização:"
          - "`kubectl rollout status deployment/nginx-deployment`"
          - "Durante o processo, você pode ver detalhes sobre a progressão da atualização:"
          - "`kubectl get rs -w`"
          - "(Pressione Ctrl+C para sair do modo de observação)"
          - "**Implementando a Estratégia Recreate**"
          - "Para algumas aplicações, pode ser necessário encerrar completamente a versão antiga antes de iniciar a nova (por exemplo, se houver incompatibilidades entre versões)."
          - "Vamos modificar o Deployment para usar a estratégia Recreate:"
          - "```yaml"
          - "# Substitua apenas a seção 'strategy' no arquivo"
          - "strategy:"
          - "  type: Recreate"
          - "```"
          - "Salve as alterações e aplique:"
          - "`kubectl apply -f nginx-deployment.yaml`"
          - "Observe o comportamento diferente durante a atualização:"
          - "`kubectl rollout status deployment/nginx-deployment`"
          - "**Adicionando Sondas de Vida e Prontidão**"
          - "As sondas (probes) são cruciais para garantir a disponibilidade da aplicação durante atualizações:"
          - "- `readinessProbe`: Determina quando um Pod está pronto para receber tráfego"
          - "- `livenessProbe`: Verifica se a aplicação está funcionando corretamente"
          - "- `startupProbe`: Verifica quando a aplicação inicializou completamente"
          - "Vamos editar o Deployment para adicionar uma livenessProbe:"
          - "```yaml"
          - "# Adicione ao container no arquivo YAML"
          - "livenessProbe:"
          - "  httpGet:"
          - "    path: /"
          - "    port: 80"
          - "  initialDelaySeconds: 15"
          - "  periodSeconds: 20"
          - "```"
          - "Aplique as mudanças e observe o comportamento:"
          - "`kubectl apply -f nginx-deployment.yaml`"
          - "`kubectl describe pod -l app=nginx | grep -A 10 Liveness`"
        tips:
          - type: "info"
            title: "Escolhendo a Estratégia"
            content: "Use RollingUpdate para a maioria das aplicações que podem coexistir em versões diferentes. Use Recreate apenas quando versões diferentes não podem coexistir (devido a incompatibilidades de DB, APIs, etc.)."
          - type: "warning"
            title: "Configuração de Probes"
            content: "Configure corretamente os tempos das sondas (initialDelaySeconds, periodSeconds, etc.) com base nas características da sua aplicação. Valores muito baixos podem causar reinícios desnecessários, enquanto valores muito altos podem atrasar a detecção de problemas."
          - type: "tip"
            title: "maxUnavailable e maxSurge"
            content: "Para atualizações extremamente cautelosas, configure maxSurge=1 e maxUnavailable=0, o que garantirá que todos os pods existentes permaneçam disponíveis durante a atualização, à custa de uma atualização mais lenta."
        validation:
          - command: "kubectl get deployment nginx-deployment -o jsonpath='{.spec.strategy.type}'"
            expectedOutput: "Recreate"
            errorMessage: "A estratégia de Deployment não foi alterada para 'Recreate' como esperado."
          - command: "kubectl get pods -l app=nginx -o jsonpath='{.items[0].spec.containers[0].livenessProbe}' | grep -q httpGet && echo 'Probe configurada' || echo 'Probe não configurada'"
            expectedOutput: "Probe configurada"
            errorMessage: "A livenessProbe não foi configurada corretamente nos Pods."

      - name: "Limpeza e Boas Práticas"
        description: "Explore boas práticas para gerenciar Deployments em ambientes de produção e limpe os recursos criados neste laboratório."
        steps:
          - "**Boas Práticas para Deployments**"
          - "Antes de concluirmos, vamos revisar algumas boas práticas essenciais para Deployments:"
          - "1. **Controle de Versão**: Sempre versione seus manifestos YAML junto com o código da aplicação"
          - "2. **Especificidade de Imagens**: Use tags específicas de imagens em vez de 'latest'"
          - "3. **Limites de Recursos**: Configure limites e requisitos de recursos adequados"
          - "4. **Sondas de Saúde**: Implemente readinessProbe e livenessProbe para cada container"
          - "5. **Service Mesh**: Para ambientes complexos, considere implementar um service mesh como Istio ou Linkerd"
          - "6. **GitOps**: Considere adotar práticas de GitOps com ferramentas como ArgoCD ou Flux"
          - "7. **Monitoramento**: Implemente monitoramento robusto para seus Deployments com Prometheus e Grafana"
          - "**Deployment vs. Outros Controladores**"
          - "O Kubernetes oferece vários controladores para diferentes casos de uso:"
          - "- **Deployment**: Para aplicações stateless com atualizações graduais"
          - "- **StatefulSet**: Para aplicações stateful com identidades estáveis e armazenamento persistente"
          - "- **DaemonSet**: Para garantir que um pod específico execute em todos os nós do cluster"
          - "- **Job/CronJob**: Para tarefas de execução única ou agendadas"
          - "**Configurando Alertas e Monitoramento**"
          - "Em ambientes de produção, você deve implementar monitoramento para seus Deployments. Alguns aspectos a monitorar:"
          - "- Disponibilidade de Pods"
          - "- Tempo de resposta da aplicação"
          - "- Uso de recursos (CPU, memória)"
          - "- Duração das atualizações"
          - "- Falhas de rollout"
          - "**Limpeza dos Recursos**"
          - "Agora vamos limpar todos os recursos que criamos neste laboratório:"
          - "`kubectl delete deployment nginx-deployment`"
          - "Verifique se todos os recursos foram removidos:"
          - "`kubectl get deployments`"
          - "`kubectl get replicasets`"
          - "`kubectl get pods -l app=nginx`"
          - "Todos esses comandos devem retornar 'No resources found'"
        tips:
          - type: "info"
            title: "Ambiente Multicluster"
            content: "Para aplicações críticas, considere implementar Deployments em múltiplos clusters para garantir alta disponibilidade mesmo em caso de falha total de um cluster."
          - type: "tip"
            title: "Rollbacks Automatizados"
            content: "Considere implementar rollbacks automatizados baseados em métricas (por exemplo, se a taxa de erro aumentar após uma atualização). Ferramentas como Flagger podem ajudar com isso."
          - type: "warning"
            title: "Gerenciamento de Secrets"
            content: "Nunca armazene secrets diretamente nos manifestos de Deployment. Use o recurso Secret do Kubernetes e injete-os como variáveis de ambiente ou volumes."
        validation:
          - command: "kubectl get deployment nginx-deployment 2>/dev/null || echo 'Deployment removido'"
            expectedOutput: "Deployment removido"
            errorMessage: "O Deployment não foi removido corretamente."
          - command: "kubectl get pods -l app=nginx 2>/dev/null || echo 'Pods removidos'"
            expectedOutput: "Pods removidos"
            errorMessage: "Os Pods do Deployment ainda existem no cluster."
