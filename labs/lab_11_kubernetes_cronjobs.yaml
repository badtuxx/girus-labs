apiVersion: v1
kind: ConfigMap
metadata:
  name: kubernetes-cronjobs-lab
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: kubernetes-cronjobs
    title: "Kubernetes: Automatizando Tarefas com CronJobs"
    description: "Aprenda a criar e gerenciar CronJobs no Kubernetes, agendando tarefas para execução automática em intervalos definidos. Neste laboratório guiado, você aprenderá o conceito de CronJobs, sua sintaxe de agendamento, como configurar políticas de retenção de histórico e monitorar suas execuções."
    duration: 30m
    image: "linuxtips/girus-devops:0.1"
    privileged: true
    tasks:
      - name: "Conceitos de CronJobs no Kubernetes"
        description: "Compreenda o que são CronJobs, quando utilizá-los e como a sintaxe de agendamento funciona."
        steps:
          - "**O que são CronJobs no Kubernetes?**"
          - "CronJobs no Kubernetes são uma extensão dos Jobs regulares, permitindo que tarefas sejam executadas em horários específicos ou intervalos regulares, de forma semelhante aos cron jobs em sistemas Unix/Linux."
          - "**Características principais dos CronJobs:**"
          - "- **Execução programada**: Realizam tarefas em horários específicos ou intervalos definidos"
          - "- **Baseados em Jobs**: Cada execução de um CronJob cria um objeto Job"
          - "- **Não interativos**: Ideais para tarefas em lote (backups, relatórios, limpeza de dados, etc.)"
          - "- **Escalabilidade**: O Kubernetes gerencia o ciclo de vida dos Pods criados"
          - "- **Histórico de execuções**: Mantém registro das execuções anteriores"
          - "**Casos de uso comuns:**"
          - "- Geração de relatórios periódicos"
          - "- Backups programados"
          - "- Limpeza de dados"
          - "- Alertas e verificações de saúde"
          - "- Processamento em lote"
          - "- Sincronização de dados"
          - "**Sintaxe de agendamento (cron schedule):**"
          - "A sintaxe do agendamento segue o formato tradicional do cron:"
          - "```"
          - "# ┌───────────── minuto (0 - 59)"
          - "# │ ┌───────────── hora (0 - 23)"
          - "# │ │ ┌───────────── dia do mês (1 - 31)"
          - "# │ │ │ ┌───────────── mês (1 - 12)"
          - "# │ │ │ │ ┌───────────── dia da semana (0 - 6) (Domingo a Sábado)"
          - "# │ │ │ │ │                                   "
          - "# │ │ │ │ │"
          - "# │ │ │ │ │"
          - "# * * * * *"
          - "```"
          - "**Exemplos de expressões cron:**"
          - "- `*/5 * * * *`: A cada 5 minutos"
          - "- `0 */2 * * *`: A cada 2 horas (às 0h, 2h, 4h, ...)"
          - "- `0 0 * * *`: Diariamente à meia-noite"
          - "- `0 0 * * 0`: Semanalmente aos domingos à meia-noite"
          - "- `0 0 1 * *`: Mensalmente no primeiro dia do mês"
          - "- `@hourly`: A cada hora (equivalente a `0 * * * *`)"
          - "- `@daily`: Diariamente (equivalente a `0 0 * * *`)"
          - "- `@weekly`: Semanalmente (equivalente a `0 0 * * 0`)"
          - "- `@monthly`: Mensalmente (equivalente a `0 0 1 * *`)"
          - "Para validar seu entendimento, use o comando abaixo para ver a próxima execução programada de uma expressão cron:"
          - "`kubectl create cronjob --image=busybox --schedule='*/5 * * * *' cronjob-exemplo --dry-run=client -o yaml | grep schedule`"
        tips:
          - type: "info"
            title: "Nomes e Namespaces"
            content: "CronJobs, como todos os recursos do Kubernetes, são identificados de forma única pela combinação de seu nome e namespace."
          - type: "warning"
            title: "Timezone"
            content: "CronJobs operam usando o UTC como timezone padrão, não o fuso horário local do seu cluster. Considere isso ao agendar tarefas."
          - type: "tip"
            title: "Testando Expressões Cron"
            content: "Ferramentas como 'cronexpressiondescriptor.com' ou 'crontab.guru' podem ajudar a verificar e entender expressões cron."
        validation:
          - command: "kubectl api-resources | grep -i 'cronjob'"
            expectedExpression: "~ cronjobs"
            errorMessage: "API de CronJobs não encontrada no cluster. Verifique se o cluster está em execução."

      - name: "Criando seu Primeiro CronJob"
        description: "Crie um CronJob simples que execute uma tarefa a cada minuto e observe seu comportamento."
        steps:
          - "**Criando um CronJob de Exemplo:**"
          - "Vamos criar um CronJob básico que exibe a data e hora a cada minuto. Este exemplo ajudará a entender o ciclo de vida de um CronJob e como monitorá-lo."
          - "Crie um arquivo YAML chamado `hello-cronjob.yaml` com o seguinte conteúdo:"
          - "```yaml"
          - "apiVersion: batch/v1"
          - "kind: CronJob"
          - "metadata:"
          - "  name: hello"
          - "spec:"
          - "  schedule: \"*/1 * * * *\"  # Executa a cada minuto"
          - "  successfulJobsHistoryLimit: 3  # Mantém histórico das últimas 3 execuções bem-sucedidas"
          - "  failedJobsHistoryLimit: 1  # Mantém histórico da última execução com falha"
          - "  concurrencyPolicy: Forbid  # Não permite execuções concorrentes"
          - "  jobTemplate:"
          - "    spec:"
          - "      template:"
          - "        spec:"
          - "          containers:"
          - "          - name: hello"
          - "            image: busybox"
          - "            args:"
          - "            - /bin/sh"
          - "            - -c"
          - "            - date; echo \"Olá do Kubernetes CronJob\""
          - "          restartPolicy: OnFailure  # Política de reinicialização em caso de falha"
          - "```"
          - "Vamos examinar os principais campos deste CronJob:"
          - "- `schedule`: Expressão cron que define quando o Job será executado"
          - "- `successfulJobsHistoryLimit`: Quantos Jobs bem-sucedidos anteriores manter para análise"
          - "- `failedJobsHistoryLimit`: Quantos Jobs com falha anteriores manter para análise"
          - "- `concurrencyPolicy`: Define como lidar com novas execuções quando a anterior ainda está em andamento"
          - "  - `Allow` (padrão): Permite execuções simultâneas"
          - "  - `Forbid`: Impede novas execuções enquanto a atual está em andamento"
          - "  - `Replace`: Cancela o Job em execução e inicia um novo"
          - "- `jobTemplate`: O modelo para o Job que será criado a cada execução agendada"
          - "- `restartPolicy`: Como lidar com falhas de Pods (OnFailure, Never)"
          - "Salve o arquivo e aplique-o ao cluster:"
          - "`kubectl apply -f hello-cronjob.yaml`"
          - "Vamos agora verificar se o CronJob foi criado:"
          - "`kubectl get cronjobs`"
          - "Você deve ver uma saída semelhante a esta:"
          - "```"
          - "NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE"
          - "hello   */1 * * * *   False     0        <none>          30s"
          - "```"
          - "Como o CronJob está agendado para executar a cada minuto, aguarde um momento e verifique novamente:"
          - "`kubectl get cronjobs`"
          - "Agora a coluna LAST SCHEDULE deve estar preenchida, indicando quando o CronJob foi executado pela última vez."
          - "**Examinando Jobs e Pods Criados:**"
          - "Cada execução do CronJob cria um Job. Vamos verificar os Jobs criados:"
          - "`kubectl get jobs`"
          - "Você verá Jobs com nomes que seguem o padrão `hello-<timestamp>`."
          - "Agora, vamos examinar os Pods criados pelos Jobs:"
          - "`kubectl get pods`"
          - "**Verificando os Logs:**"
          - "Para ver a saída do seu CronJob, obtenha o nome do Pod mais recente e verifique seus logs:"
          - "`POD_NAME=$(kubectl get pods --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')`"
          - "`kubectl logs $POD_NAME`"
          - "Você deve ver a data e a mensagem \"Olá do Kubernetes CronJob\"."
        tips:
          - type: "warning"
            title: "Limpeza Automática"
            content: "O controlador de CronJobs limpa automaticamente os Jobs concluídos com base nos limites de histórico definidos. Sem estes limites, seu cluster pode acumular muitos objetos desnecessários."
          - type: "info"
            title: "Suspendendo CronJobs"
            content: "Se precisar interromper temporariamente um CronJob sem excluí-lo, você pode suspendê-lo: kubectl patch cronjob hello -p '{\"spec\":{\"suspend\":true}}'"
          - type: "tip"
            title: "Configuração de Recursos"
            content: "Para CronJobs em produção, sempre defina limites de recursos (CPU/memória) para garantir estabilidade do cluster."
        validation:
          - command: "kubectl get cronjobs | grep -q hello && echo 'CronJob encontrado' || echo 'CronJob não encontrado'"
            expectedOutput: "CronJob encontrado"
            errorMessage: "O CronJob 'hello' não foi criado corretamente."
          - command: "kubectl get jobs --selector=job-name | wc -l"
            expectedExpression: "> 0"
            errorMessage: "Nenhum Job foi criado pelo CronJob. Talvez seja necessário aguardar o próximo minuto."

      - name: "Gerenciando CronJobs"
        description: "Aprenda a monitorar, modificar e solucionar problemas com CronJobs."
        steps:
          - "**Monitorando CronJobs**"
          - "O monitoramento adequado dos CronJobs é essencial para garantir que suas tarefas agendadas estejam funcionando conforme esperado."
          - "Para uma visão detalhada do seu CronJob, use o comando:"
          - "`kubectl describe cronjob hello`"
          - "Preste atenção na seção 'Events', que registra as ações recentes realizadas pelo controlador do CronJob."
          - "**Verificando o Histórico de Execuções:**"
          - "Como configuramos nosso CronJob para manter um histórico, podemos ver as execuções anteriores:"
          - "`kubectl get jobs --selector=job-name`"
          - "**Editando um CronJob Existente:**"
          - "Vamos modificar o agendamento do nosso CronJob para que ele seja executado a cada 2 minutos, em vez de a cada minuto:"
          - "`kubectl edit cronjob hello`"
          - "- No editor que se abre, localize o campo `schedule` e altere-o para `*/2 * * * *`"
          - "- Salve o arquivo e saia do editor (geralmente `:wq` no vim)"
          - "Verifique se a alteração foi aplicada:"
          - "`kubectl get cronjob hello -o jsonpath='{.spec.schedule}'`"
          - "A saída deve mostrar o novo agendamento: `*/2 * * * *`"
          - "**Acionando um CronJob Manualmente:**"
          - "Você também pode criar um Job a partir do modelo do CronJob a qualquer momento, sem esperar pelo agendamento:"
          - "`kubectl create job --from=cronjob/hello hello-manual`"
          - "Verifique se o novo Job foi criado:"
          - "`kubectl get jobs`"
          - "E examine os logs do Pod criado:"
          - "`POD_NAME=$(kubectl get pods --selector=job-name=hello-manual -o jsonpath='{.items[0].metadata.name}')`"
          - "`kubectl logs $POD_NAME`"
          - "**Pausando e Retomando CronJobs:**"
          - "Se você precisar interromper temporariamente as execuções agendadas, pode suspender o CronJob:"
          - "`kubectl patch cronjob hello -p '{\"spec\":{\"suspend\":true}}'`"
          - "Verifique se o CronJob foi suspenso:"
          - "`kubectl get cronjob hello`"
          - "A coluna SUSPEND deve mostrar 'True'."
          - "Para retomar o agendamento:"
          - "`kubectl patch cronjob hello -p '{\"spec\":{\"suspend\":false}}'`"
          - "**Excluindo um CronJob:**"
          - "Quando não precisar mais do CronJob, você pode excluí-lo junto com todos os seus Jobs associados:"
          - "`kubectl delete cronjob hello`"
          - "Verifique se todos os Jobs relacionados também foram excluídos:"
          - "`kubectl get jobs --selector=job-name`"
        tips:
          - type: "tip"
            title: "Práticas Recomendadas"
            content: "Para tarefas críticas, implemente alertas com base no status de conclusão dos Jobs para ser notificado sobre falhas."
          - type: "warning"
            title: "Proteção contra Falhas"
            content: "Configure timeouts (activeDeadlineSeconds no spec.jobTemplate) para evitar que Jobs fiquem presos indefinidamente em caso de problemas."
          - type: "info"
            title: "Monitoramento de Longo Prazo"
            content: "Em ambientes de produção, use ferramentas como o Prometheus para monitorar métricas de CronJobs ao longo do tempo."
        validation:
          - command: "kubectl get cronjob hello 2>/dev/null || echo 'CronJob excluído'"
            expectedOutput: "CronJob excluído"
            errorMessage: "O CronJob 'hello' não foi excluído corretamente."

      - name: "Implementando CronJobs para Aplicações Reais"
        description: "Crie um CronJob mais complexo que simula um cenário de backup de banco de dados."
        steps:
          - "**Cenário: Backup de Banco de Dados**"
          - "Neste exercício, vamos criar um CronJob que simula o backup diário de um banco de dados às 2h da manhã. Como não temos um banco de dados real, vamos simular este processo."
          - "Crie um arquivo YAML chamado `db-backup-cronjob.yaml` com o seguinte conteúdo:"
          - "```yaml"
          - "apiVersion: batch/v1"
          - "kind: CronJob"
          - "metadata:"
          - "  name: database-backup"
          - "spec:"
          - "  schedule: \"0 2 * * *\"  # Às 2h da manhã, todos os dias"
          - "  successfulJobsHistoryLimit: 7  # Mantém uma semana de histórico"
          - "  failedJobsHistoryLimit: 3"
          - "  concurrencyPolicy: Forbid"
          - "  startingDeadlineSeconds: 600  # 10 minutos para iniciar após a hora agendada"
          - "  jobTemplate:"
          - "    spec:"
          - "      template:"
          - "        spec:"
          - "          containers:"
          - "          - name: backup"
          - "            image: busybox"
          - "            resources:"
          - "              requests:"
          - "                memory: \"64Mi\""
          - "                cpu: \"100m\""
          - "              limits:"
          - "                memory: \"128Mi\""
          - "                cpu: \"200m\""
          - "            command:"
          - "            - /bin/sh"
          - "            - -c"
          - "            - |"
          - "              echo \"Iniciando backup do banco de dados em $(date)\""
          - "              echo \"Conectando ao servidor de banco de dados...\""
          - "              sleep 3"
          - "              echo \"Criando dump do banco de dados...\""
          - "              sleep 5"
          - "              echo \"Compactando arquivo de backup...\""
          - "              sleep 2"
          - "              echo \"Enviando backup para armazenamento persistente...\""
          - "              sleep 3"
          - "              echo \"Backup concluído com sucesso em $(date)\""
          - "          restartPolicy: OnFailure"
          - "```"
          - "Este CronJob inclui várias configurações avançadas:"
          - "- `startingDeadlineSeconds`: Tempo máximo após o horário agendado em que o job ainda pode começar"
          - "- Definição de recursos (CPU e memória): Limitando os recursos que o Job pode consumir"
          - "- Script mais complexo: Simulando várias etapas de um processo de backup"
          - "Crie o CronJob:"
          - "`kubectl apply -f db-backup-cronjob.yaml`"
          - "**Para fins de teste (já que não vamos esperar até às 2h da manhã):**"
          - "Vamos criar um Job manualmente a partir deste CronJob:"
          - "`kubectl create job --from=cronjob/database-backup database-backup-test`"
          - "Acompanhe o progresso do Job:"
          - "`kubectl get jobs -w`"
          - "Pressione Ctrl+C para sair do modo de observação depois que o job estiver concluído."
          - "Examine os logs para ver a simulação do processo de backup:"
          - "`POD_NAME=$(kubectl get pods --selector=job-name=database-backup-test -o jsonpath='{.items[0].metadata.name}')`"
          - "`kubectl logs $POD_NAME`"
          - "**Limpeza**"
          - "Remova o Job de teste e o CronJob:"
          - "`kubectl delete job database-backup-test`"
          - "`kubectl delete cronjob database-backup`"
        tips:
          - type: "info"
            title: "Volumes em CronJobs"
            content: "Em cenários reais de backup, você adicionaria volumes ao seu CronJob para armazenar os dados de backup, como um PersistentVolumeClaim ou um volume de armazenamento em nuvem."
          - type: "warning"
            title: "Segurança em CronJobs"
            content: "Para acessar recursos protegidos como bancos de dados, use Secrets do Kubernetes para armazenar credenciais e monte-os no container como variáveis de ambiente ou arquivos."
          - type: "tip"
            title: "Notificações de Status"
            content: "Em ambientes de produção, adicione código para enviar notificações sobre o status do backup (por exemplo, via Slack, email ou um sistema de monitoramento)."
        validation:
          - command: "kubectl get cronjob database-backup 2>/dev/null || echo 'CronJob excluído'"
            expectedOutput: "CronJob excluído"
            errorMessage: "O CronJob 'database-backup' não foi excluído corretamente."
