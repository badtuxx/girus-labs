apiVersion: v1
kind: ConfigMap
metadata:
  name: linux-comandos-basicos-lab
  namespace: girus
  labels:
    app: girus-lab-template
data:
  lab.yaml: |
    name: linux-comandos-basicos
    title: "Fundamentos do Linux: Navegação e Comandos Essenciais"
    description: "Domine os comandos básicos e conceitos fundamentais do Linux necessários para operar eficientemente em ambientes de linha de comando. Este laboratório guiado explora a navegação do sistema de arquivos, manipulação de arquivos e gerenciamento de processos, fornecendo uma base sólida para administração de sistemas e operações diárias no Linux."
    duration: 25m
    image: "linuxtips/girus-devops:0.1"
    tasks:
      - name: "Navegação no Sistema de Arquivos"
        description: "Compreenda a estrutura de diretórios do Linux e aprenda a navegar eficientemente pelo sistema utilizando comandos essenciais."
        steps:
          - "**Compreendendo o Sistema de Arquivos Linux**"
          - "O Linux organiza todos os arquivos em uma estrutura hierárquica única, iniciando no diretório raiz representado por `/`. Diferente do Windows com suas unidades separadas (C:, D:), no Linux tudo faz parte de uma única árvore de diretórios."
          - "Alguns diretórios importantes incluem:"
          - "- `/home`: Contém os diretórios pessoais dos usuários"
          - "- `/etc`: Armazena arquivos de configuração do sistema"
          - "- `/var`: Contém dados variáveis como logs e filas"
          - "- `/bin` e `/usr/bin`: Armazenam programas (binários) executáveis"
          - "- `/tmp`: Arquivos temporários, geralmente limpos na reinicialização"
          - "**Localizando-se no Sistema**"
          - "O primeiro passo para navegar eficientemente é saber onde você está atualmente. Para isso, usamos o comando `pwd` (Print Working Directory):"
          - "`pwd`"
          - "Este comando exibe o caminho completo do diretório atual, partindo da raiz `/`."
          - "**Listando Conteúdo de Diretórios**"
          - "Para ver o conteúdo do diretório atual, usamos o comando `ls` (list). Por padrão, ele mostra apenas arquivos não-ocultos em formato simples:"
          - "`ls`"
          - "Para obter informações mais detalhadas e ver arquivos ocultos (que começam com `.`), usamos flags adicionais:"
          - "`ls -la`"
          - "Aqui:"
          - "- `-l` ativa o formato longo, mostrando permissões, proprietário, tamanho, data de modificação, etc."
          - "- `-a` mostra todos os arquivos, incluindo os ocultos"
          - "**Significado das colunas na saída de `ls -l`:**"
          - "1. Tipo de arquivo e permissões (ex: `-rw-r--r--`)"
          - "2. Número de links"
          - "3. Proprietário do arquivo"
          - "4. Grupo do arquivo"
          - "5. Tamanho em bytes"
          - "6. Data e hora da última modificação"
          - "7. Nome do arquivo"
          - "**Criando e Navegando entre Diretórios**"
          - "Para criar um novo diretório, usamos o comando `mkdir` (make directory):"
          - "`mkdir lab-practice`"
          - "Para mudar para este diretório, usamos o comando `cd` (change directory):"
          - "`cd lab-practice`"
          - "Confirme que você está no novo diretório:"
          - "`pwd`"
          - "**Criando Arquivos Vazios**"
          - "O comando `touch` é uma maneira simples de criar arquivos vazios ou atualizar a data de modificação de arquivos existentes:"
          - "`touch file1.txt file2.txt file3.txt`"
          - "Verifique os arquivos criados:"
          - "`ls -l`"
          - "Você verá que os arquivos foram criados com tamanho zero."
          - "**Navegação Avançada**"
          - "Alguns atalhos úteis para navegação:"
          - "- `cd ..`: Move para o diretório pai (um nível acima)"
          - "- `cd ~` ou apenas `cd`: Move para o diretório home do usuário atual"
          - "- `cd -`: Retorna ao diretório anterior (onde estava antes do último cd)"
          - "- `cd /`: Move para o diretório raiz do sistema"
          - "Experimente voltar um nível acima e depois retornar ao diretório de prática:"
          - "`cd ..`"
          - "`pwd`"
          - "`cd lab-practice`"
        tips:
          - type: "info"
            title: "Dica: Atalhos para Completar Nomes"
            content: "A tecla Tab é extremamente útil para autocompletar nomes de arquivos e diretórios. Pressione Tab uma vez para completar automaticamente se houver apenas uma opção, ou duas vezes para ver todas as possibilidades."
          - type: "tip"
            title: "Navegação Rápida"
            content: "Para navegação rápida, você pode combinar múltiplos níveis em um único comando: `cd ../../outro-dir` move dois níveis acima e então para 'outro-dir'."
          - type: "warning"
            title: "Caminhos Absolutos vs Relativos"
            content: "Caminhos que começam com / são absolutos (a partir da raiz), enquanto outros são relativos ao diretório atual. Usar caminhos relativos geralmente torna seus comandos mais portáveis."
        validation:
          - command: "test -d lab-practice && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "Diretório 'lab-practice' não foi criado corretamente."
          - command: "test -f lab-practice/file1.txt && test -f lab-practice/file2.txt && test -f lab-practice/file3.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "Os três arquivos de teste não foram criados corretamente."

      - name: "Manipulação de Arquivos e Conteúdo"
        description: "Aprenda a criar, editar, copiar e manipular arquivos no Linux, entendendo os conceitos de redirecionamento e comandos para processamento de texto."
        steps:
          - "**Editores de Texto no Linux**"
          - "O Linux oferece diversos editores de texto para criar e modificar arquivos. Os mais comuns são:"
          - "- **vim/vi**: Poderoso, mas com curva de aprendizado íngreme"
          - "- **nano**: Mais simples e amigável para iniciantes"
          - "- **emacs**: Editor extensível e altamente personalizável"
          - "Neste laboratório, usaremos o Vim devido à sua ubiquidade - está presente em praticamente todos os sistemas Linux."
          - "**Criando e Editando com Vim**"
          - "O Vim opera em diferentes 'modos', sendo os principais o modo normal (navegação), modo de inserção (edição) e modo de comando (executar comandos)."
          - "Vamos criar um arquivo de texto usando o Vim:"
          - "`vim notes.txt`"
          - "Por padrão, o Vim inicia no modo normal. Para inserir texto, pressione `i` para entrar no modo de inserção. Digite as seguintes linhas:"
          - "```"
          - "Minhas anotações sobre Linux:"
          - "1. Linux é um sistema operacional baseado em Unix"
          - "2. Foi criado por Linus Torvalds em 1991"
          - "3. O símbolo do Linux é um pinguim chamado Tux"
          - "```"
          - "Após digitar, pressione a tecla `Esc` para voltar ao modo normal. Para salvar e sair:"
          - "1. Digite `:` para entrar no modo de comando"
          - "2. Digite `wq` (write and quit) e pressione Enter"
          - "**Fluxo de trabalho básico no Vim:**"
          - "- `i`: Entrar no modo de inserção (antes do cursor)"
          - "- `a`: Entrar no modo de inserção (após o cursor)"
          - "- `Esc`: Voltar ao modo normal"
          - "- `:w`: Salvar (write)"
          - "- `:q`: Sair (quit)"
          - "- `:wq` ou `ZZ`: Salvar e sair"
          - "- `:q!`: Sair sem salvar (forçar)"
          - "**Visualizando Conteúdo de Arquivos**"
          - "Para visualizar o conteúdo de um arquivo sem abri-lo para edição, há várias opções:"
          - "`cat notes.txt`"
          - "O comando `cat` exibe todo o conteúdo do arquivo de uma vez. Para arquivos maiores, é melhor usar:"
          - "`less notes.txt`"
          - "O `less` permite navegar pelo arquivo usando as teclas de seta, Page Up/Down, etc. Pressione `q` para sair."
          - "Para ver apenas as primeiras ou últimas linhas:"
          - "`head -n 2 notes.txt`  # Mostra as primeiras 2 linhas"
          - "`tail -n 2 notes.txt`  # Mostra as últimas 2 linhas"
          - "**Copiando, Movendo e Renomeando Arquivos**"
          - "Para copiar um arquivo:"
          - "`cp notes.txt notes-backup.txt`"
          - "Para mover ou renomear (no Linux, é a mesma operação):"
          - "`mv notes-backup.txt backup-1.txt`"
          - "`ls -l`  # Veja que notes-backup.txt agora é backup-1.txt"
          - "Para restaurar o nome original:"
          - "`mv backup-1.txt notes-backup.txt`"
          - "**Comparando Arquivos**"
          - "O comando `diff` permite ver as diferenças entre arquivos:"
          - "`diff notes.txt notes-backup.txt`"
          - "Não deve haver diferenças ainda. Vamos modificar o arquivo original:"
          - "`echo 'Nova linha adicionada!' >> notes.txt`"
          - "O operador `>>` acrescenta a saída do comando `echo` ao final do arquivo sem substituir o conteúdo existente."
          - "Agora, compare novamente:"
          - "`diff notes.txt notes-backup.txt`"
          - "Você verá a diferença: a linha adicional no arquivo original."
          - "**Redirecionamento e Pipes**"
          - "O Linux permite redirecionar a saída de comandos para arquivos ou outros comandos:"
          - "- `>`: Redireciona e sobrescreve o arquivo"
          - "- `>>`: Redireciona e acrescenta ao arquivo"
          - "- `|`: Pipe - envia a saída de um comando para a entrada de outro"
          - "Exemplos:"
          - "`echo 'Conteúdo novo' > new-file.txt`  # Cria ou sobrescreve"
          - "`echo 'Mais uma linha' >> new-file.txt`  # Acrescenta"
          - "`cat notes.txt | grep Linux`  # Filtra linhas contendo 'Linux'"
        tips:
          - type: "warning"
            title: "Atenção: Redirecionamentos"
            content: "O símbolo > redireciona a saída e sobrescreve o arquivo existente completamente. Tenha cuidado para não perder dados importantes. Use >> para adicionar ao final sem apagar o conteúdo anterior."
          - type: "tip"
            title: "Editor Alternativo"
            content: "Se não estiver confortável com Vim, tente usar o editor nano que é mais intuitivo: `nano notes.txt`. No nano, os comandos são mostrados na parte inferior da tela, e Ctrl+O salva, Ctrl+X sai."
          - type: "info"
            title: "Saindo do Vim"
            content: "Se ficar preso no Vim sem saber como sair, pressione Esc (para garantir que está no modo normal) e depois digite :q! e pressione Enter. Isso sairá sem salvar alterações."
        validation:
          - command: "test -f lab-practice/notes.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "Arquivo notes.txt não foi criado corretamente."
          - command: "test -f lab-practice/notes-backup.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "Arquivo de backup não foi criado corretamente."
          - command: "grep -q 'Nova linha adicionada!' lab-practice/notes.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "A nova linha não foi adicionada ao arquivo notes.txt."

      - name: "Gerenciamento de Processos"
        description: "Compreenda como o Linux gerencia processos e aprenda a monitorar, controlar e gerenciar aplicações em execução através da linha de comando."
        steps:
          - "**Conceitos Fundamentais de Processos no Linux**"
          - "No Linux, cada programa em execução é representado por um ou mais processos. Um processo é essencialmente uma instância de um programa em execução, com seu próprio espaço de memória, recursos e identificador único (PID - Process ID)."
          - "Processos podem estar em diferentes estados:"
          - "- **Running**: Executando ativamente ou pronto para execução"
          - "- **Sleeping**: Aguardando algum evento ou recurso"
          - "- **Stopped**: Pausado, geralmente por um sinal"
          - "- **Zombie**: Processo terminado, mas com entrada ainda na tabela de processos"
          - "**Listando Processos**"
          - "O comando mais básico para listar processos é `ps` (process status):"
          - "`ps`"
          - "Por padrão, `ps` mostra apenas os processos associados ao seu terminal atual. Para ver todos os processos do sistema, usamos flags adicionais:"
          - "`ps aux`"
          - "Onde:"
          - "- `a`: Mostra processos de todos os usuários"
          - "- `u`: Formato orientado ao usuário, com colunas como %CPU, %MEM"
          - "- `x`: Inclui processos sem terminal de controle"
          - "A saída contém colunas importantes como:"
          - "- **USER**: Proprietário do processo"
          - "- **PID**: ID do processo"
          - "- **%CPU/%MEM**: Porcentagem de CPU e memória utilizadas"
          - "- **STAT**: Estado do processo (R=running, S=sleeping, Z=zombie, etc.)"
          - "- **COMMAND**: Comando que iniciou o processo"
          - "**Monitoramento em Tempo Real**"
          - "Para monitorar processos em tempo real, usamos ferramentas como `top` ou `htop`:"
          - "`htop`"
          - "O `htop` é uma versão melhorada do `top`, com interface colorida e interativa. Ele mostra:"
          - "- Gráficos de uso de CPU e memória"
          - "- Lista de processos ordenável (F6)"
          - "- Filtros (F4) e busca"
          - "- Opções para enviar sinais a processos (F9)"
          - "Navegue usando as teclas de seta e pressione `q` para sair."
          - "**Executando Processos em Segundo Plano**"
          - "No Linux, podemos facilmente executar processos em background (segundo plano) usando o operador `&`:"
          - "`sleep 300 &`"
          - "Este comando inicia um processo que simplesmente "dorme" por 300 segundos (5 minutos), mas o faz em segundo plano, liberando o terminal para outros comandos."
          - "O sistema exibirá o PID do processo em background, algo como `[1] 12345`."
          - "**Verificando Processos em Background**"
          - "Para ver os jobs (tarefas) em execução em segundo plano no seu terminal atual:"
          - "`jobs`"
          - "Para encontrar um processo específico por nome, podemos usar `grep` com `ps`:"
          - "`ps aux | grep sleep`"
          - "Observe que este comando também mostrará o próprio processo `grep`."
          - "**Controlando Processos**"
          - "O Linux fornece vários comandos para controlar processos em execução:"
          - "- `kill [PID]`: Envia um sinal (por padrão, SIGTERM) para encerrar graciosamente"
          - "- `kill -9 [PID]` ou `kill -KILL [PID]`: Força o encerramento imediato (use com cautela)"
          - "- `killall [nome]`: Encerra todos os processos com o nome especificado"
          - "- `pkill [padrão]`: Encerra processos correspondentes a um padrão"
          - "Vamos encerrar o processo `sleep` que iniciamos:"
          - "`pkill sleep`"
          - "Verifique se o processo foi encerrado:"
          - "`ps aux | grep sleep`"
          - "Agora você deve ver apenas o processo `grep` na saída."
          - "**Prioridade de Processos**"
          - "No Linux, cada processo tem uma prioridade ('nice') que vai de -20 (maior prioridade) a 19 (menor prioridade). Podemos iniciar um processo com prioridade específica:"
          - "`nice -n 10 sleep 60 &`"
          - "Ou alterar a prioridade de um processo em execução (requer permissões elevadas para aumentar a prioridade):"
          - "`renice +5 [PID]`"
        tips:
          - type: "tip"
            title: "Alternativa ao top"
            content: "O comando htop é uma versão melhorada do top com interface colorida e interativa. Se não estiver instalado, você pode fazê-lo com 'sudo apt install htop' em sistemas Debian/Ubuntu."
          - type: "info"
            title: "Processos Zumbis"
            content: "Processos zumbis (estado Z) são processos que terminaram, mas cujo estado de saída ainda não foi coletado pelo processo pai. Geralmente são inofensivos a menos que existam em grande número."
          - type: "warning"
            title: "Kill -9"
            content: "O sinal SIGKILL (kill -9) força o encerramento imediato do processo sem permitir limpeza de recursos. Use apenas quando outros sinais falharem, pois pode causar perda de dados ou recursos não liberados."
        validation:
          - command: "ps aux | grep -v grep | grep -q sleep || echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "O processo sleep não foi encerrado corretamente."
          - command: "command -v htop &>/dev/null || echo 'instale htop'; echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "O comando htop não está disponível."

      - name: "Gerenciamento de Permissões Básicas"
        description: "Entenda o sistema de permissões do Linux e aprenda a controlar o acesso a arquivos e diretórios de forma segura e eficiente."
        steps:
          - "**Sistema de Permissões do Linux**"
          - "O Linux implementa um sistema de permissões baseado em usuários e grupos que controla quem pode acessar arquivos e diretórios e o que podem fazer com eles."
          - "Cada arquivo e diretório no Linux tem três níveis de permissões:"
          - "- **Proprietário (u)**: O usuário que possui o arquivo"
          - "- **Grupo (g)**: O grupo associado ao arquivo"
          - "- **Outros (o)**: Todos os outros usuários"
          - "**Tipos de Permissões**"
          - "Cada nível pode ter três tipos de permissões:"
          - "- **r (read)**: Permite ler o conteúdo"
          - "- **w (write)**: Permite modificar o conteúdo"
          - "- **x (execute)**: Permite executar (para arquivos) ou acessar (para diretórios)"
          - "**Visualizando Permissões**"
          - "Quando usamos `ls -l`, vemos as permissões no primeiro campo da saída:"
          - "`ls -l`"
          - "O formato é: `rwxrwxrwx`"
          - "- Primeiros 3 caracteres: permissões do proprietário"
          - "- 3 caracteres do meio: permissões do grupo"
          - "- Últimos 3 caracteres: permissões para outros"
          - "Um `-` indica que a permissão está ausente."
          - "**Alterando Permissões**"
          - "O comando `chmod` (change mode) permite alterar permissões. Há duas notações principais:"
          - "**Notação simbólica**: Usando letras e símbolos"
          - "Crie um arquivo para teste:"
          - "`echo 'Arquivo de teste para permissões' > perm_test.txt`"
          - "Verifique as permissões atuais:"
          - "`ls -l perm_test.txt`"
          - "Adicione permissão de execução para o proprietário:"
          - "`chmod u+x perm_test.txt`"
          - "Remova permissão de leitura para outros:"
          - "`chmod o-r perm_test.txt`"
          - "Defina permissões para leitura e escrita para todos:"
          - "`chmod a=rw perm_test.txt`"
          - "**Notação octal**: Usando números (mais concisa)"
          - "Cada permissão tem um valor numérico:"
          - "- r = 4"
          - "- w = 2"
          - "- x = 1"
          - "A soma desses valores para cada nível define as permissões:"
          - "`chmod 644 perm_test.txt`  # rw-r--r--"
          - "`chmod 755 perm_test.txt`  # rwxr-xr-x"
          - "`chmod 600 perm_test.txt`  # rw-------"
          - "**Alterando Proprietário e Grupo**"
          - "O comando `chown` (change owner) altera o proprietário e/ou grupo:"
          - "`sudo chown root perm_test.txt`  # Muda apenas o proprietário"
          - "`sudo chown root:root perm_test.txt`  # Muda proprietário e grupo"
          - "O comando `chgrp` muda apenas o grupo:"
          - "`sudo chgrp root perm_test.txt`"
          - "**Permissões Especiais para Diretórios**"
          - "Para diretórios, as permissões têm significados ligeiramente diferentes:"
          - "- **r**: Permite listar o conteúdo"
          - "- **w**: Permite criar, renomear ou remover arquivos dentro do diretório"
          - "- **x**: Permite acessar o diretório"
          - "Crie um diretório para teste:"
          - "`mkdir test_dir`"
          - "Defina permissões de forma recursiva (para o diretório e seu conteúdo):"
          - "`chmod -R 750 test_dir`  # rwxr-x---"
        tips:
          - type: "info"
            title: "Permissões de Diretório"
            content: "A permissão de execução (x) em diretórios é crucial: sem ela, você não pode acessar os arquivos dentro dele, mesmo que tenha permissões para esses arquivos."
          - type: "warning"
            title: "Segurança"
            content: "Evite dar permissões muito abertas (ex: 777) a arquivos e diretórios. Isso representa um risco de segurança, especialmente em ambientes multiusuário ou servidores."
          - type: "tip"
            title: "Permissões e Comandos sudo"
            content: "Comandos como chown normalmente requerem privilégios de superusuário (sudo). Se receber erros de permissão, verifique se está usando sudo quando necessário."
        validation:
          - command: "test -f lab-practice/perm_test.txt && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "O arquivo perm_test.txt não foi criado corretamente."
          - command: "test -d lab-practice/test_dir && echo 'ok'"
            expectedOutput: "ok"
            errorMessage: "O diretório test_dir não foi criado corretamente."
